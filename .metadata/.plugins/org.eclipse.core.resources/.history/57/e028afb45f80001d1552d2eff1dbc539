package com.ravi.test.configuration;

import javax.sql.DataSource;

import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider;
import org.springframework.batch.item.database.JdbcBatchItemWriter;
import org.springframework.batch.item.database.builder.JdbcBatchItemWriterBuilder;
import org.springframework.batch.item.file.FlatFileItemReader;
import org.springframework.batch.item.file.builder.FlatFileItemReaderBuilder;
import org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.ClassPathResource;

import com.ravi.test.domain.Employee;

@Configuration
@EnableBatchProcessing
public class BatchConfiguration {

	 @Autowired
	    public JobBuilderFactory jobBuilderFactory;

	    @Autowired
	    public StepBuilderFactory stepBuilderFactory;
	    
	    @Value("${file.input}")
	    private String fileInput;
	    
	    
	    @Bean
	    public FlatFileItemReader<Employee> reader() {
	    	PoiItemReader<StudentDTO> reader = new PoiItemReader<>();
	        reader.setLinesToSkip(1);
	        reader.setResource(new ClassPathResource("data/students.xlsx"));
	        reader.setRowMapper(excelRowMapper());
	        return reader;
	    }
	    
	    @Bean
	    public JdbcBatchItemWriter<Employee> writer(DataSource dataSource) {
	        return new JdbcBatchItemWriterBuilder()
	          .itemSqlParameterSourceProvider(new BeanPropertyItemSqlParameterSourceProvider<>())
	          .sql("INSERT INTO coffee (brand, origin, characteristics) VALUES (:brand, :origin, :characteristics)")
	          .dataSource(dataSource)
	          .build();
	    }
}
